name: CI/CD Pipeline - Build, Push, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: |
          services=(auth-service menu-service transaction-service report-service migration-service frontend)
          for service in "${services[@]}"; do
            echo "Installing dependencies for $service..."
            npm --prefix "$service" ci
          done

      - name: Prisma Generate for Services
        run: |
          services=(auth-service menu-service transaction-service report-service migration-service)
          for service in "${services[@]}"; do
            if [ -f "$service/prisma/schema.prisma" ]; then
              echo "Generating Prisma client for $service..."
              npx prisma generate --schema "$service/prisma/schema.prisma"
            fi
          done

      - name: Run Tests
        run: |
          services=(auth-service menu-service transaction-service report-service)
          for service in "${services[@]}"; do
            if [ -f "$service/package.json" ]; then
              echo "Running tests for $service..."
              npm --prefix "$service" test
            fi
          done

  build-and-push:
    name: Build and Push to Docker Hub
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            nginx,
            auth-service,
            frontend,
            menu-service,
            notification-service,
            report-service,
            transaction-service,
            migration-service,
          ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            PROJECT_PATH="/home/pitok/project-akhir-topsus"

            # Navigate to project directory, or clone if it doesn't exist
            if [ -d "$PROJECT_PATH" ]; then
              cd "$PROJECT_PATH"
              git pull origin main
            else
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_PATH"
              cd "$PROJECT_PATH"
            fi

            # Create or update .env file
            echo "${{ secrets.ENV_FILE_PROD }}" > .env

            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # Pull the latest images
            docker-compose pull

            # Run database migrations
            docker-compose run --rm migration-service

            # Start all other services
            docker-compose up -d --remove-orphans

            # Clean up dangling images
            docker image prune -f
