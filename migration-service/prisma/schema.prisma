// migration-service/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  CASHIER
}

// User Management (Auth Service)
model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String        @map("password")
  role         userRole      @default(CASHIER)
  createdAt    DateTime      @default(now()) @map("created_at")
  transactions Transaction[] // Relasi ke transaksi yang dibuat oleh user ini

  @@index([email])
  @@map("users") // Nama tabel di database
}

// Menu Management (Menu Service)
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  menus     Menu[] // Relasi ke menu-menu di kategori ini

  @@map("categories")
}

model Menu {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  price            Float
  categoryId       Int               @map("category_id")
  category         Category          @relation(fields: [categoryId], references: [id])
  imageUrl         String?           @map("image_url")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  transactionItems TransactionItem[] // Relasi ke item transaksi yang menggunakan menu ini

  @@map("menus")
}

// Transaction Management (Transaction Service & Report Service)
model Transaction {
  id              Int      @id @default(autoincrement())
  userId          String   @map("user_id") // Kasir yang melakukan transaksi
  user            User     @relation(fields: [userId], references: [id])
  transactionDate DateTime @default(now()) @map("transaction_date")
  totalAmount     Float
  paymentMethod   String   @default("cash") @map("payment_method")
  status          String   @default("pending")
  paymentToken    String?  @unique @map("payment_token")
  paymentUrl      String?  @unique @map("payment_url")

  items TransactionItem[] // Item-item dalam transaksi ini

  @@map("transactions")
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  transactionId Int         @map("transaction_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  menuId        Int         @map("menu_id")
  menu          Menu        @relation(fields: [menuId], references: [id])
  quantity      Int
  priceAtSale   Float       @map("price_at_sale") // Harga saat transaksi dilakukan
  itemTotal     Float       @map("item_total") // quantity * priceAtSale

  @@map("transaction_items")
}
