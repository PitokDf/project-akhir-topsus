services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/uastopsus.conf:/etc/nginx/conf.d/default.conf:ro
      - ./menu-service/uploads:/usr/share/nginx/html/uploads:ro
    depends_on:
      - frontend
      - auth-service
      - menu-service
      - transaction-service
      - report-service
      - notification-service
    networks:
      - cashiersystem-network

  frontend:
    container_name: "frontend-pos"
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Teruskan variabel yang dibutuhkan saat build
        - NEXT_PUBLIC_API_URL=http://api.cafe.com # Contoh
        - NEXT_PUBLIC_TRANSACTION_SERVICE_URL=http://api.cafe.com
    ports:
      - "3000:3000"
    # TIDAK ADA VOLUMES UNTUK KODE DI PRODUKSI
    # env_file dan environment bisa dihapus jika semua variabel sudah
    # di-handle saat build time.
    depends_on:
      - auth-service
    networks:
      - cashiersystem-network

  auth-service:
    container_name: "frontend-auth"
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      target: builder
    ports:
      - "3001:3001"
    volumes:
      - ./auth-service:/usr/src/app
    env_file:
      - ./auth-service/.env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:121203@db:5432/uas-topsus?schema=public
    command: npm run dev
    depends_on:
      migration-service:
        condition: service_completed_successfully
    networks:
      - cashiersystem-network

  menu-service:
    container_name: "menu-pos"
    build:
      context: ./menu-service
      dockerfile: Dockerfile
      target: builder
    ports:
      - "3002:3002"
    volumes:
      - ./menu-service:/usr/src/app
    env_file:
      - ./menu-service/.env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:121203@db:5432/uas-topsus?schema=public
      - REDIS_URL=redis://redis:6379
    command: npm run dev
    depends_on:
      redis:
        condition: service_started
      migration-service:
        condition: service_completed_successfully
    networks:
      - cashiersystem-network

  transaction-service:
    container_name: "transaction-pos"
    build:
      context: ./transaction-service
      dockerfile: Dockerfile
      target: builder
    ports:
      - "3003:3003"
    volumes:
      - ./transaction-service:/usr/src/app
    env_file:
      - ./transaction-service/.env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:121203@db:5432/uas-topsus?schema=public
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    command: npm run dev
    depends_on:
      migration-service:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - cashiersystem-network

  report-service:
    container_name: "report-pos"
    build:
      context: ./report-service
      dockerfile: Dockerfile
      target: builder
    ports:
      - "3004:3004"
    volumes:
      - ./report-service:/usr/src/app
    env_file:
      - ./report-service/.env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:121203@db:5432/uas-topsus?schema=public
      - MENU_SERVICE_URL=http://menu-service:3002/api/v1
      - TRANSACTION_SERVICE_URL=http://transaction-service:3003/api/v1
    command: npm run dev
    depends_on:
      migration-service:
        condition: service_completed_successfully
    networks:
      - cashiersystem-network

  notification-service:
    container_name: "notification-pos"
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      target: builder
    ports:
      - "3005:3005"
    volumes:
      - ./notification-service:/usr/src/app
    env_file:
      - ./notification-service/.env
    environment:
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    command: npm run dev
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - cashiersystem-network

  db:
    image: postgres:14-alpine
    container_name: postgres_db_dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=uas-topsus
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=121203
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d uas-topsus"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - cashiersystem-network

  migration-service:
    build:
      context: ./migration-service
      dockerfile: Dockerfile
    volumes:
      - ./migration-service/prisma:/usr/src/app/prisma
    environment:
      - DATABASE_URL=postgresql://postgres:121203@db:5432/uas-topsus?schema=public
    command: npx prisma migrate deploy
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cashiersystem-network

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq_dev
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - cashiersystem-network

  redis:
    image: redis:7-alpine
    container_name: redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - cashiersystem-network

  ngrok:
    build:
      context: ./ngrok
      dockerfile: Dockerfile
    ports:
      - "4040:4040"
    command: start api --config /etc/ngrok/ngrok.yml
    env_file:
      - .env
    depends_on:
      - nginx
    networks:
      - cashiersystem-network

volumes:
  postgres_data_dev:
  rabbitmq_data_dev:
  redis_data_dev:

networks:
  cashiersystem-network:
    driver: bridge
